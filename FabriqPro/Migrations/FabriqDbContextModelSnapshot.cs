// <auto-generated />
using System;
using FabriqPro;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FabriqPro.Migrations
{
    [DbContext(typeof(FabriqDbContext))]
    partial class FabriqDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CuttingMaterial", b =>
                {
                    b.Property<int>("CuttingId")
                        .HasColumnType("integer");

                    b.Property<int>("MaterialsUsedId")
                        .HasColumnType("integer");

                    b.HasKey("CuttingId", "MaterialsUsedId");

                    b.HasIndex("MaterialsUsedId");

                    b.ToTable("CuttingMaterial");
                });

            modelBuilder.Entity("CuttingProductPart", b =>
                {
                    b.Property<int>("CuttingId")
                        .HasColumnType("integer");

                    b.Property<int>("ProducedPartsId")
                        .HasColumnType("integer");

                    b.HasKey("CuttingId", "ProducedPartsId");

                    b.HasIndex("ProducedPartsId");

                    b.ToTable("CuttingProductPart");
                });

            modelBuilder.Entity("FabriqPro.Features.Authentication.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("address");

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Department")
                        .HasColumnType("integer")
                        .HasColumnName("department");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("last_name");

                    b.Property<string>("PassportSeries")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("passport_series");

                    b.Property<string>("Password")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("phone_number");

                    b.Property<string>("ProfilePhoto")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("profile_photo");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<double?>("Salary")
                        .HasColumnType("double precision")
                        .HasColumnName("salary");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("WorkingDays")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("working_days");

                    b.Property<double?>("WorkingHours")
                        .HasColumnType("double precision")
                        .HasColumnName("working_hours");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("FabriqPro.Features.Clients.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("address");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Accessory.Accessory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AcceptedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("accepted_user_id");

                    b.Property<int>("AccessoryId")
                        .HasColumnType("integer")
                        .HasColumnName("accessory_id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Department")
                        .HasColumnType("integer")
                        .HasColumnName("department");

                    b.Property<int>("FromUserId")
                        .HasColumnType("integer")
                        .HasColumnName("from_user_id");

                    b.Property<int?>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnName("origin_id");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("ToUserId")
                        .HasColumnType("integer")
                        .HasColumnName("to_user_id");

                    b.Property<int>("Unit")
                        .HasColumnType("integer")
                        .HasColumnName("unit");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedUserId");

                    b.HasIndex("AccessoryId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("OriginId");

                    b.HasIndex("ToUserId");

                    b.HasIndex("Department", "ToUserId", "AccessoryId", "Status")
                        .IsUnique();

                    b.ToTable("accessory_department", (string)null);
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Accessory.AccessoryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("title");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("accessories", (string)null);
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("color_code");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("title");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("ColorCode")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("colors", (string)null);
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Material.Cutting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("MasterId")
                        .HasColumnType("integer")
                        .HasColumnName("master_id");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double>("Waste")
                        .HasColumnType("double precision")
                        .HasColumnName("waste");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("cuttings", (string)null);
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Material.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AcceptedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("accepted_user_id");

                    b.Property<int>("ColorId")
                        .HasColumnType("integer")
                        .HasColumnName("color_id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Department")
                        .HasColumnType("integer")
                        .HasColumnName("department");

                    b.Property<int>("FromUserId")
                        .HasColumnType("integer")
                        .HasColumnName("from_user_id");

                    b.Property<bool>("HasPatterns")
                        .HasColumnType("boolean")
                        .HasColumnName("has_patterns");

                    b.Property<int>("MaterialId")
                        .HasColumnType("integer")
                        .HasColumnName("material_id");

                    b.Property<int?>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnName("origin_id");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer")
                        .HasColumnName("party_id");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("Thickness")
                        .HasColumnType("double precision")
                        .HasColumnName("thickness");

                    b.Property<int>("ToUserId")
                        .HasColumnType("integer")
                        .HasColumnName("to_user_id");

                    b.Property<int>("Unit")
                        .HasColumnType("integer")
                        .HasColumnName("unit");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double>("Width")
                        .HasColumnType("double precision")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedUserId");

                    b.HasIndex("ColorId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("OriginId");

                    b.HasIndex("PartyId");

                    b.HasIndex("ToUserId");

                    b.HasIndex("Department", "ToUserId", "MaterialId", "PartyId", "Status")
                        .IsUnique();

                    b.ToTable("material_to_department", (string)null);
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Material.MaterialType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("title");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("materials", (string)null);
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Miscellaneous.Miscellaneous", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AcceptedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("accepted_user_id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Department")
                        .HasColumnType("integer")
                        .HasColumnName("department");

                    b.Property<int>("FromUserId")
                        .HasColumnType("integer")
                        .HasColumnName("from_user_id");

                    b.Property<int>("MiscellaneousTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("miscellaneous_id");

                    b.Property<int?>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnName("origin_id");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("ToUserId")
                        .HasColumnType("integer")
                        .HasColumnName("to_user_id");

                    b.Property<int>("Unit")
                        .HasColumnType("integer")
                        .HasColumnName("unit");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedUserId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("MiscellaneousTypeId");

                    b.HasIndex("OriginId");

                    b.HasIndex("ToUserId");

                    b.HasIndex("Department", "ToUserId", "MiscellaneousTypeId", "Status")
                        .IsUnique();

                    b.ToTable("miscellaneous_department", (string)null);
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Miscellaneous.MiscellaneousType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("title");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("miscellaneous", (string)null);
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("title");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("parties", (string)null);
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Product.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Department")
                        .HasColumnType("integer")
                        .HasColumnName("department");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("integer")
                        .HasColumnName("from_user_id");

                    b.Property<int>("MasterId")
                        .HasColumnType("integer")
                        .HasColumnName("master_id");

                    b.Property<int?>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnName("origin_id");

                    b.Property<int>("ProductModelId")
                        .HasColumnType("integer")
                        .HasColumnName("product_model_id");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("product_type_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("ToUserId")
                        .HasColumnType("integer")
                        .HasColumnName("to_user_id");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("MasterId");

                    b.HasIndex("OriginId");

                    b.HasIndex("ProductModelId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("ToUserId");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Product.ProductModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ColorId")
                        .HasColumnType("integer")
                        .HasColumnName("color_id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("product_type_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("title");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("product_models", (string)null);
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Product.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("title");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Title");

                    b.ToTable("product_types", (string)null);
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.ProductPart.ProductPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Department")
                        .HasColumnType("integer")
                        .HasColumnName("department");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("integer")
                        .HasColumnName("from_user_id");

                    b.Property<int>("MasterId")
                        .HasColumnType("integer")
                        .HasColumnName("master_id");

                    b.Property<int?>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnName("origin_id");

                    b.Property<int>("ProductModelId")
                        .HasColumnType("integer")
                        .HasColumnName("product_model_id");

                    b.Property<int>("ProductPartTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("product_part_type_id");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("ToUserId")
                        .HasColumnType("integer")
                        .HasColumnName("to_user_id");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("MasterId");

                    b.HasIndex("OriginId");

                    b.HasIndex("ProductModelId");

                    b.HasIndex("ProductPartTypeId");

                    b.HasIndex("ToUserId");

                    b.HasIndex("Department", "MasterId", "ProductPartTypeId", "Status")
                        .IsUnique();

                    b.ToTable("product_parts", (string)null);
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.ProductPart.ProductPartType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("product_type_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("title");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("product_part_types", (string)null);
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.SparePart.SparePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AcceptedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("accepted_user_id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Department")
                        .HasColumnType("integer")
                        .HasColumnName("department");

                    b.Property<int>("FromUserId")
                        .HasColumnType("integer")
                        .HasColumnName("from_user_id");

                    b.Property<int?>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnName("origin_id");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity");

                    b.Property<int>("SparePartId")
                        .HasColumnType("integer")
                        .HasColumnName("spare_part_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("ToUserId")
                        .HasColumnType("integer")
                        .HasColumnName("to_user_id");

                    b.Property<int>("Unit")
                        .HasColumnType("integer")
                        .HasColumnName("unit");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedUserId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("OriginId");

                    b.HasIndex("SparePartId");

                    b.HasIndex("ToUserId");

                    b.HasIndex("Department", "ToUserId", "SparePartId", "Status")
                        .IsUnique();

                    b.ToTable("spare_part_department", (string)null);
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.SparePart.SparePartType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("title");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("spare_parts", (string)null);
                });

            modelBuilder.Entity("CuttingMaterial", b =>
                {
                    b.HasOne("FabriqPro.Features.Products.Models.Material.Cutting", null)
                        .WithMany()
                        .HasForeignKey("CuttingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FabriqPro.Features.Products.Models.Material.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialsUsedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CuttingProductPart", b =>
                {
                    b.HasOne("FabriqPro.Features.Products.Models.Material.Cutting", null)
                        .WithMany()
                        .HasForeignKey("CuttingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FabriqPro.Features.Products.Models.ProductPart.ProductPart", null)
                        .WithMany()
                        .HasForeignKey("ProducedPartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Accessory.Accessory", b =>
                {
                    b.HasOne("FabriqPro.Features.Authentication.Models.User", "AcceptedUser")
                        .WithMany()
                        .HasForeignKey("AcceptedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FabriqPro.Features.Products.Models.Accessory.AccessoryType", "AccessoryType")
                        .WithMany("AccessoryDepartments")
                        .HasForeignKey("AccessoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FabriqPro.Features.Authentication.Models.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FabriqPro.Features.Products.Models.Accessory.Accessory", "Origin")
                        .WithMany("Transfers")
                        .HasForeignKey("OriginId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FabriqPro.Features.Authentication.Models.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcceptedUser");

                    b.Navigation("AccessoryType");

                    b.Navigation("FromUser");

                    b.Navigation("Origin");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Material.Cutting", b =>
                {
                    b.HasOne("FabriqPro.Features.Authentication.Models.User", "Master")
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Material.Material", b =>
                {
                    b.HasOne("FabriqPro.Features.Authentication.Models.User", "AcceptedUser")
                        .WithMany("AcceptedMaterials")
                        .HasForeignKey("AcceptedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FabriqPro.Features.Products.Models.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FabriqPro.Features.Authentication.Models.User", "FromUser")
                        .WithMany("SentMaterials")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FabriqPro.Features.Products.Models.Material.MaterialType", "MaterialType")
                        .WithMany("Materials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FabriqPro.Features.Products.Models.Material.Material", "Origin")
                        .WithMany("Transfers")
                        .HasForeignKey("OriginId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FabriqPro.Features.Products.Models.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FabriqPro.Features.Authentication.Models.User", "ToUser")
                        .WithMany("ReceivedMaterials")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcceptedUser");

                    b.Navigation("Color");

                    b.Navigation("FromUser");

                    b.Navigation("MaterialType");

                    b.Navigation("Origin");

                    b.Navigation("Party");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Miscellaneous.Miscellaneous", b =>
                {
                    b.HasOne("FabriqPro.Features.Authentication.Models.User", "AcceptedUser")
                        .WithMany()
                        .HasForeignKey("AcceptedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FabriqPro.Features.Authentication.Models.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FabriqPro.Features.Products.Models.Miscellaneous.MiscellaneousType", "MiscellaneousType")
                        .WithMany("Miscellaneous")
                        .HasForeignKey("MiscellaneousTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FabriqPro.Features.Products.Models.Miscellaneous.Miscellaneous", "Origin")
                        .WithMany("Transfers")
                        .HasForeignKey("OriginId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FabriqPro.Features.Authentication.Models.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcceptedUser");

                    b.Navigation("FromUser");

                    b.Navigation("MiscellaneousType");

                    b.Navigation("Origin");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Product.Product", b =>
                {
                    b.HasOne("FabriqPro.Features.Authentication.Models.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FabriqPro.Features.Authentication.Models.User", "Master")
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FabriqPro.Features.Products.Models.Product.Product", "Origin")
                        .WithMany("Transfers")
                        .HasForeignKey("OriginId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FabriqPro.Features.Products.Models.Product.ProductModel", "ProductModel")
                        .WithMany("Products")
                        .HasForeignKey("ProductModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FabriqPro.Features.Products.Models.Product.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FabriqPro.Features.Authentication.Models.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FromUser");

                    b.Navigation("Master");

                    b.Navigation("Origin");

                    b.Navigation("ProductModel");

                    b.Navigation("ProductType");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Product.ProductModel", b =>
                {
                    b.HasOne("FabriqPro.Features.Products.Models.Color", "Color")
                        .WithMany("ProductModels")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FabriqPro.Features.Products.Models.Product.ProductType", "ProductType")
                        .WithMany("ProductModels")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.ProductPart.ProductPart", b =>
                {
                    b.HasOne("FabriqPro.Features.Authentication.Models.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FabriqPro.Features.Authentication.Models.User", "Master")
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FabriqPro.Features.Products.Models.ProductPart.ProductPart", "Origin")
                        .WithMany("Transfers")
                        .HasForeignKey("OriginId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FabriqPro.Features.Products.Models.Product.ProductModel", "ProductModel")
                        .WithMany("ProductParts")
                        .HasForeignKey("ProductModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FabriqPro.Features.Products.Models.ProductPart.ProductPartType", "ProductPartType")
                        .WithMany("ProductParts")
                        .HasForeignKey("ProductPartTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FabriqPro.Features.Authentication.Models.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FromUser");

                    b.Navigation("Master");

                    b.Navigation("Origin");

                    b.Navigation("ProductModel");

                    b.Navigation("ProductPartType");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.ProductPart.ProductPartType", b =>
                {
                    b.HasOne("FabriqPro.Features.Products.Models.Product.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.SparePart.SparePart", b =>
                {
                    b.HasOne("FabriqPro.Features.Authentication.Models.User", "AcceptedUser")
                        .WithMany()
                        .HasForeignKey("AcceptedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FabriqPro.Features.Authentication.Models.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FabriqPro.Features.Products.Models.SparePart.SparePart", "Origin")
                        .WithMany("Transfers")
                        .HasForeignKey("OriginId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FabriqPro.Features.Products.Models.SparePart.SparePartType", "SparePartType")
                        .WithMany("SpareParts")
                        .HasForeignKey("SparePartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FabriqPro.Features.Authentication.Models.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcceptedUser");

                    b.Navigation("FromUser");

                    b.Navigation("Origin");

                    b.Navigation("SparePartType");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("FabriqPro.Features.Authentication.Models.User", b =>
                {
                    b.Navigation("AcceptedMaterials");

                    b.Navigation("ReceivedMaterials");

                    b.Navigation("SentMaterials");
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Accessory.Accessory", b =>
                {
                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Accessory.AccessoryType", b =>
                {
                    b.Navigation("AccessoryDepartments");
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Color", b =>
                {
                    b.Navigation("ProductModels");
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Material.Material", b =>
                {
                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Material.MaterialType", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Miscellaneous.Miscellaneous", b =>
                {
                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Miscellaneous.MiscellaneousType", b =>
                {
                    b.Navigation("Miscellaneous");
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Product.Product", b =>
                {
                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Product.ProductModel", b =>
                {
                    b.Navigation("ProductParts");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.Product.ProductType", b =>
                {
                    b.Navigation("ProductModels");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.ProductPart.ProductPart", b =>
                {
                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.ProductPart.ProductPartType", b =>
                {
                    b.Navigation("ProductParts");
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.SparePart.SparePart", b =>
                {
                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("FabriqPro.Features.Products.Models.SparePart.SparePartType", b =>
                {
                    b.Navigation("SpareParts");
                });
#pragma warning restore 612, 618
        }
    }
}
